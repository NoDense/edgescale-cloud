# SPDX-License-Identifier: Apache-2.0 OR MIT
# Copyright 2018-2019 NXP


import os


TASK_STATUS_READY = 0
TASK_STATUS_SCHEDULED = 1
TASK_STATUS_CANCELED = 2
TASK_STATUS_FAIL = 3
TASK_STATUS_STARTED = 4
TASK_STATUS_COMPLETE = 5
TASK_STATUS_START_FAIL = 6

TASK_STATUS_HEALTHY = [TASK_STATUS_READY, TASK_STATUS_SCHEDULED, TASK_STATUS_STARTED]
TASK_STATUS_NAMES = {
    TASK_STATUS_READY: 'Created',
    TASK_STATUS_SCHEDULED: 'Scheduled',
    TASK_STATUS_CANCELED: 'Canceled',
    TASK_STATUS_FAIL: 'Fail',
    TASK_STATUS_STARTED: 'Started',
    TASK_STATUS_COMPLETE: 'Complete',
    TASK_STATUS_START_FAIL: 'StartFail',
}

_task_status = list(TASK_STATUS_NAMES.keys())
_task_status.extend(list(map(str, list(_task_status))))
TASK_STATUS = tuple(_task_status)


# TODO The task status codes should be synchronised with the 'scale_da_task_updater'


#### DA task status START
DA_TASK_STATUS_READY = 0
DA_TASK_STATUS_PENDING = 1
DA_TASK_STATUS_CREATING = 2
DA_TASK_STATUS_STARTING = 3
DA_TASK_STATUS_RUNNING = 5

DA_TASK_STATUS_UNKNOWN = -1
DA_TASK_STATUS_FAILED = 4
DA_TASK_STATUS_DELETING = 6
DA_TASK_STATUS_DELETED = 7
DA_TASK_STATUS_TIMEOUT = 8
DA_TASK_STATUS_ERROR = 9
DA_TASK_STATUS_K8S_NO_RESPONSE = 10
DA_TASK_STATUS_START_FAIL = 11
DA_TASK_STATUS_INPUT_ERROR = 12
DA_TASK_STATUS_APP_NOT_FOUND = 13

DA_TASK_SCHEDULED = [DA_TASK_STATUS_READY, DA_TASK_STATUS_PENDING, DA_TASK_STATUS_CREATING,
                     DA_TASK_STATUS_STARTING, DA_TASK_STATUS_RUNNING, DA_TASK_STATUS_DELETING]
DA_TASK_COMPLETE = [DA_TASK_STATUS_DELETED]
DA_TASK_FAIL = [DA_TASK_STATUS_FAILED, DA_TASK_STATUS_TIMEOUT,
                DA_TASK_STATUS_ERROR, DA_TASK_STATUS_K8S_NO_RESPONSE,
                DA_TASK_STATUS_START_FAIL, DA_TASK_STATUS_INPUT_ERROR,
                DA_TASK_STATUS_APP_NOT_FOUND,]

# DA_TASK_HEALTHY = [DA_TASK_STATUS_READY, DA_TASK_STATUS_PENDING, DA_TASK_STATUS_CREATING,
#                    DA_TASK_STATUS_STARTING, DA_TASK_STATUS_RUNNING]
DA_TASK_STATUS_NAMES = {
    DA_TASK_STATUS_UNKNOWN: 'Unknown',
    DA_TASK_STATUS_READY: 'Ready',
    DA_TASK_STATUS_PENDING: 'Pending',
    DA_TASK_STATUS_CREATING: 'Creating',
    DA_TASK_STATUS_STARTING: 'Starting',
    DA_TASK_STATUS_FAILED: 'Failed',
    DA_TASK_STATUS_RUNNING: 'Running',
    DA_TASK_STATUS_DELETING: 'Deleting',
    DA_TASK_STATUS_DELETED: 'Delete successfully',
    DA_TASK_STATUS_TIMEOUT: 'Timeout',
    DA_TASK_STATUS_ERROR: 'Error',
    DA_TASK_STATUS_K8S_NO_RESPONSE: 'StartFailure',
    DA_TASK_STATUS_INPUT_ERROR: 'InvalidParameter',
    DA_TASK_STATUS_APP_NOT_FOUND: 'AppNotFound',
}

da_task_status = list(DA_TASK_STATUS_NAMES.keys())
da_task_status.extend(list(map(str, list(da_task_status))))
DA_TASK_STATUS = tuple(da_task_status)
#### DA task status END


#### OTA task codes START
OTA_TASK_CODE_UNKNOWN = -1
OTA_TASK_CODE_START = 0
OTA_TASK_CODE_FETCH = 1
OTA_TASK_CODE_VERIFY = 2
OTA_TASK_CODE_INSTALL = 3
OTA_TASK_CODE_REBOOT = 4
OTA_TASK_CODE_ROLLBACK = 5
OTA_TASK_CODE_COMPLETE = 6

OTA_TASK_STATUS_UNKNOWN = 'Others, unknown'
OTA_TASK_STATUS_START = 'ota-start'
OTA_TASK_STATUS_FETCH = 'ota-fetch'
OTA_TASK_STATUS_VERIFY = 'ota-verify'
OTA_TASK_STATUS_INSTALL = 'ota-install'
OTA_TASK_STATUS_REBOOT = 'ota-reboot'
OTA_TASK_STATUS_ROLLBACK = 'ota-rollback'
OTA_TASK_STATUS_COMPLETE = 'ota-complete'

OTA_STATUS_NAMES = {
    OTA_TASK_STATUS_UNKNOWN: OTA_TASK_CODE_UNKNOWN,
    OTA_TASK_STATUS_START: OTA_TASK_CODE_START,
    OTA_TASK_STATUS_FETCH: OTA_TASK_CODE_FETCH,
    OTA_TASK_STATUS_VERIFY: OTA_TASK_CODE_VERIFY,
    OTA_TASK_STATUS_INSTALL: OTA_TASK_CODE_INSTALL,
    OTA_TASK_STATUS_REBOOT: OTA_TASK_CODE_REBOOT,
    OTA_TASK_STATUS_ROLLBACK: OTA_TASK_CODE_ROLLBACK,
    OTA_TASK_STATUS_COMPLETE: OTA_TASK_CODE_COMPLETE,
}

OTA_STATUS_MAP = {
    OTA_TASK_CODE_UNKNOWN: OTA_TASK_STATUS_UNKNOWN,
    OTA_TASK_CODE_START: OTA_TASK_STATUS_START,
    OTA_TASK_CODE_FETCH: OTA_TASK_STATUS_FETCH,
    OTA_TASK_CODE_VERIFY: OTA_TASK_STATUS_VERIFY,
    OTA_TASK_CODE_INSTALL: OTA_TASK_STATUS_INSTALL,
    OTA_TASK_CODE_REBOOT: OTA_TASK_STATUS_REBOOT,
    OTA_TASK_CODE_ROLLBACK: OTA_TASK_STATUS_ROLLBACK,
    OTA_TASK_CODE_COMPLETE: OTA_TASK_STATUS_COMPLETE,
}

_ota_task_status = list(OTA_STATUS_NAMES.keys())
OTA_TASK_STATUS = tuple(_ota_task_status)
#### OTA task codes END


TASK_TYPE_APP = 0
TASK_TYPE_SOLUTION = 1
TASK_TYPE_NAMES = {
    TASK_TYPE_APP: 'deploy_app',
    TASK_TYPE_SOLUTION: 'deploy_solution'
}

_LIMIT = 2000
_OFFSET = 0

TIMEOUT_DAYS = 1

RESOURCE_DEPLOY_APP = 'https://{dns}:{port}/v1/user/{uid}/app'
RESOURCE_QUERY_APP_STATUS = 'https://{dns}:{port}/v1/user/{uid}/app/{name}'

_dirname = os.path.dirname(os.path.realpath(__file__))
CERTS = (
    os.path.join(_dirname, 'keys', 'admin.pem'),
    os.path.join(_dirname, 'keys', 'admin-key.pem'),
)

HEADERS = {
    'User-Agent': 'kubectl/v1.7.0 (linux/amd64) kubernetes/d3ada01',
    'Accept': 'application/json',
    'Content-Type': 'application/json',
}

env = 'prod'


class ProductConfig(dict):
    K8S_HOST = ''
    K8S_PORT = 443
    DB_HOST = ''
    DB_PORT = 5432
    DATABASE = ''
    USER = ''
    PASSWORD = ''

    # debug flag
    DEBUG = True


# The edgescale configure

class DevConfig():
    K8S_HOST = os.getenv("hostIp")
    K8S_PORT = 7443
    DB_HOST = os.getenv("hostIp")
    DB_PORT = 5432
    DATABASE = 'edgescale'
    USER = 'edgescale'
    PASSWORD = 'edgescale'

    # debug flag
    DEBUG = True




